name: event-booking-application

services:
  mongodb:
    image: mongo:latest
    container_name: event_mongo
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "27017" ]
    ports:
      - "27017:27017"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    volumes:
      - "event_mongo:/data"

  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_USER=event
      - POSTGRES_PASSWORD=event
      - POSTGRES_DB=event
    ports:
      - "5432:5432"
    volumes:
      - event_pg:/var/lib/postgresql/data
    command: ["postgres", "-c", "listen_addresses=*"]
    entrypoint: >
      bash -c "docker-entrypoint.sh postgres &
      sleep 5 &&
      psql -U $$POSTGRES_USER -d $$POSTGRES_DB -c 'CREATE DATABASE identity;' &&
      psql -U $$POSTGRES_USER -d $$POSTGRES_DB -c 'CREATE DATABASE orders;' &&
      wait"
    restart: unless-stopped

  minio:
    container_name: minio
    image: quay.io/minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    #    network can be global as I don't minio to be separate from the global installation in the machine
    environment:
      MINIO_ROOT_USER: minio1234
      MINIO_ROOT_PASSWORD: minio1234
    volumes:
      - minio:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped

networks:
  event-booking-network:
    driver: bridge

volumes:
  event_mongo:
  event_pg:
  minio:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /Users/pavankumarpunna/pavan/software/minio-volume-mount
