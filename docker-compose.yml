name: event-booking-application

services:
  mongodb:
    image: mongo:8.0.5
    container_name: event_mongo
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "27017" ]
    ports:
      - "27017:27017"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    volumes:
      - "event_mongo:/data"
    restart: unless-stopped

  postgres:
    container_name: event_pg
    image: postgres:17.4
    environment:
      - POSTGRES_USER=event
      - POSTGRES_PASSWORD=event
      - POSTGRES_DB=event
    ports:
      - "5432:5432"
    volumes:
      - event_pg:/var/lib/postgresql/data
    command: [ "postgres", "-c", "listen_addresses=*" ]
    entrypoint: >
      bash -c "docker-entrypoint.sh postgres &
      sleep 5 &&
      DB_EXIST_IDENTITY=$$(psql -U $$POSTGRES_USER -tAc \"SELECT 1 FROM pg_database WHERE datname='identity'\") &&
      DB_EXIST_ORDERS=$$(psql -U $$POSTGRES_USER -tAc \"SELECT 1 FROM pg_database WHERE datname='orders'\") &&
      DB_EXIST_PAYMENTS=$$(psql -U $$POSTGRES_USER -tAc \"SELECT 1 FROM pg_database WHERE datname='payments'\") &&
      if [ -z \"$$DB_EXIST_IDENTITY\" ]; then psql -U $$POSTGRES_USER -d $$POSTGRES_DB -c 'CREATE DATABASE identity;'; fi &&
      if [ -z \"$$DB_EXIST_ORDERS\" ]; then psql -U $$POSTGRES_USER -d $$POSTGRES_DB -c 'CREATE DATABASE orders;'; fi &&
      if [ -z \"$$DB_EXIST_PAYMENTS\" ]; then psql -U $$POSTGRES_USER -d $$POSTGRES_DB -c 'CREATE DATABASE payments;'; fi &&
      wait"
    restart: unless-stopped

  minio:
    container_name: minio
    image: quay.io/minio/minio:RELEASE.2025-03-12T18-04-18Z
    ports:
      - "9000:9000"
      - "9001:9001"
    #    network can be global as I don't want minio to be separate from the global installation in the machine
    environment:
      MINIO_ROOT_USER: minio1234
      MINIO_ROOT_PASSWORD: minio1234
    volumes:
      - minio:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped

  pulsar:
    image: apachepulsar/pulsar:4.0.3
    container_name: pulsar
    command: bin/pulsar standalone
    ports:
      - "6650:6650"
      - "8079:8080"
    volumes:
      - pulsar_data:/pulsar/data
      - pulsar_logs:/pulsar/logs
    environment:
      PULSAR_MEM: "-Xms512m -Xmx1g -XX:MaxDirectMemorySize=1g"
    networks:
      - event-booking-network
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    container_name: event_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper  # Persistent storage for Zookeeper
    networks:
      - event-booking-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.9.0
    container_name: event_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka  # Persistent storage for Kafka
    networks:
      - event-booking-network
    restart: unless-stopped

networks:
  event-booking-network:
    driver: bridge

volumes:
  event_mongo:
  event_pg:
  zookeeper_data:
  kafka_data:
  pulsar_data:
  pulsar_logs:
  minio:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /Users/pavankumarpunna/pavan/software/minio-volume-mount
